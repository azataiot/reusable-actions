name: Reusable Python Workflow
on:
  workflow_call:
    inputs:
      create-issue:
        type: boolean
        description: 'Whether to create an issue or not if release exists'
        required: false
        default: true
      fail-if-release-exists:
        type: boolean
        description: 'Whether to fail if release exists or not'
        required: false
        default: true



jobs:
  release:
    env:
      GH_TOKEN: ${{ github.token }}
    permissions:
      issues: write
      pull-requests: write
      contents: write
    runs-on: ubuntu-latest

    steps:
      - name: Inputs Information
        run: |
          echo "create-issue: ${{ inputs.create-issue }}"
          echo "fail-if-release-exists: ${{ inputs.fail-if-release-exists }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version and release type from pyproject.toml
        run: |
          echo "VERSION=$(grep '^\[tool.poetry\]' -A 5 pyproject.toml | grep '^version =' | awk -F\" '{print $2}')" >> $GITHUB_ENV
          echo "current version is $VERSION"


      - name: Check if release exists
        id: check_release
        run: |
          if gh release view "$VERSION" > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_ENV
            echo "Github release with this version: ${{VERSION}} already exists"
          else
            echo "exists=false" >> $GITHUB_ENV
          fi
        continue-on-error: true

      - name: Create a new issue if release exists
        if: ${{ inputs.create-issue == "true" }} && env.exists == 'true'
        run: |
          gh issue create --title "Release $VERSION already exists" --body "The release for version $VERSION already exists. Please review and take appropriate action."

      - name: Fail if release exists
        if: ${{ inputs.fail-if-release-exists == true  }} && env.exists == 'true'
        run: |
          echo "Error: Release $VERSION already exists!"
          exit 1

      - name: gh release create
        if: env.exists == 'false'
        run: |
          gh release create --generate-notes --title "Release $VERSION" "$VERSION"
